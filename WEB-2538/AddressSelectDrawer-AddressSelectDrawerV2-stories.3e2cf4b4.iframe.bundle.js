"use strict";(self.webpackChunk_shippo_feron=self.webpackChunk_shippo_feron||[]).push([[5838],{"./app/components/AddressSelectDrawer/AddressSelectDrawerV2.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Return:()=>Return,SelectedAddress:()=>SelectedAddress,default:()=>AddressSelectDrawerV2_stories});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),emotion_react_jsx_runtime_browser_esm=__webpack_require__("./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js"),es=__webpack_require__("./node_modules/react-redux/es/index.js"),redux=__webpack_require__("./node_modules/redux/es/redux.js"),MobileAndDesktopDrawer=__webpack_require__("./node_modules/@goshippo/libraries/dist/esm/shared/MobileAndDesktopDrawer/index.js"),APIAddress=__webpack_require__("./app/types/APIAddress.ts"),DrawerProvider=__webpack_require__("./app/contexts/DrawerProvider.tsx"),AddressBookList=__webpack_require__("./app/pages/Orders/Blackbeard/Drawers/AddressDrawer/AddressBookList.tsx"),react=__webpack_require__("./node_modules/react/index.js"),AddressDrawerForm=__webpack_require__("./app/pages/Orders/Blackbeard/Drawers/AddressDrawer/AddressDrawerForm.tsx"),AddressValidation=__webpack_require__("./app/components/AddressValidation/index.ts"),useAddressBook=__webpack_require__("./app/components/withAddressBook/useAddressBook.ts"),OrdersTable=__webpack_require__("./app/pages/Orders/All/OrdersTable/OrdersTable.tsx"),useAddressFromAddressBook=__webpack_require__("./app/pages/Orders/Blackbeard/Drawers/AddressDrawer/useAddressFromAddressBook.ts"),addressInfo={to:null,sender:null,return:null};const AddressSelectDrawer_AddressSelectDrawerV2=function(_a){var addresses=_a.addresses,addressType=_a.addressType,open=_a.open,selectedAddressID=_a.selectedAddressID,t=_a.t,onClose=_a.onClose,onEditAddress=_a.onEditAddress,onSubmitSelectedAddress=_a.onSubmitSelectedAddress,_b=(0,DrawerProvider.g)(),_c=_b.footerOptions,footerButtonPrimary=_c.footerButtonPrimary,footerButtonSecondary=_c.footerButtonSecondary,setFooterOptions=_b.setFooterOptions,_d=(0,useAddressBook.fT)(OrdersTable.E),isSelectedReturnInSavedAddresses=_d.isSelectedReturnInSavedAddresses,isSelectedSenderInSavedAddresses=_d.isSelectedSenderInSavedAddresses,combineSenderReturnAddresses=_d.combineSenderReturnAddresses,areAllSenderReturnAddressesEqual=_d.areAllSenderReturnAddressesEqual,_e=(0,tslib_es6.zs)((0,react.useState)(null),2),editingAddress=_e[0],setEditingAddress=_e[1],_f=(0,tslib_es6.zs)((0,react.useState)(!1),2),isAddingNewAddress=_f[0],setIsAddingNewAddress=_f[1],_g=(0,tslib_es6.zs)((0,react.useState)(!1),2),newAddressForm=_g[0],setNewAddressForm=_g[1],editingAddressInfoForForm=(0,react.useMemo)((function(){var _a;return(0,tslib_es6.Cl)((0,tslib_es6.Cl)({},addressInfo),((_a={})[addressType]=(0,APIAddress.pv)(editingAddress),_a))}),[addressType,editingAddress]),addressFromAddressBook=(0,useAddressFromAddressBook.V)({addresses,selectedAddresses:editingAddressInfoForForm[addressType]}).addressFromAddressBook,handleEditAddress=(0,react.useCallback)((function(address){setEditingAddress(address)}),[]),handleCancelEdit=(0,react.useCallback)((function(){setEditingAddress(null)}),[]),onClickAddNewAddress=(0,react.useCallback)((function(){setIsAddingNewAddress(!0),setNewAddressForm(!0)}),[]),handleFirstLoad=(0,react.useCallback)((function(){}),[]),handleUpdateAddress=(0,react.useCallback)((function(address,meta){(null==editingAddress?void 0:editingAddress.id)?onEditAddress((0,tslib_es6.Cl)((0,tslib_es6.Cl)({},address),{id:editingAddress.id}),meta):onEditAddress((0,tslib_es6.Cl)({},address),meta)}),[onEditAddress,editingAddress]),showForm=newAddressForm||!!editingAddress;return(0,emotion_react_jsx_runtime_browser_esm.Y)(MobileAndDesktopDrawer.A,(0,tslib_es6.Cl)({title:t("orders:manualLabel:editAddress"),open,onClose,fullHeight:!0,fullWidth:!0,footerButtonPrimary,footerButtonSecondary},{children:showForm?(0,emotion_react_jsx_runtime_browser_esm.Y)(AddressValidation.ku,{children:(0,emotion_react_jsx_runtime_browser_esm.Y)(AddressDrawerForm.A,{addressInfoForForm:editingAddressInfoForForm,editingAddressType:addressType,areAllSenderReturnAddressesEqual,initialCombineSenderReturn:combineSenderReturnAddresses,isSelectedReturnInSavedAddresses,isSelectedSenderInSavedAddresses,hasRecipientPhoneRequireError:!1,onCancel:handleCancelEdit,onFirstLoad:handleFirstLoad,onUpdateAddress:handleUpdateAddress,setFooterOptions,hasFooterOptions:!0,addressFromAddressBook,t,isAddingNewAddress})}):(0,emotion_react_jsx_runtime_browser_esm.Y)(AddressBookList._,{t,addresses,addressInfo,selectedAddressID,editingAddressType:addressType,onUpdateAddress:onSubmitSelectedAddress,onEditAddress:handleEditAddress,onClickAddNewAddress})}))};var mocks=__webpack_require__("./app/tests/mocks/index.ts"),translate=__webpack_require__("./app/utils/translate.ts"),reducers=__webpack_require__("./app/reducers/index.ts");const AddressSelectDrawerV2_stories={title:"Address Book / AddressSelectDrawerV2",component:AddressSelectDrawer_AddressSelectDrawerV2,parameters:{layout:"centered"},argTypes:{onClose:{action:"onClose"},onEditAddress:{action:"onEditAddress"},onSubmitSelectedAddress:{action:"onSubmitSelectedAddress"}}};var AddressSelectDrawerV2WithTranslate=(0,translate.Tl)("orders")(AddressSelectDrawer_AddressSelectDrawerV2),Template=function(args){return(0,emotion_react_jsx_runtime_browser_esm.Y)(es.Kq,(0,tslib_es6.Cl)({store:(0,redux.y$)((0,redux.HY)(reducers.A))},{children:(0,emotion_react_jsx_runtime_browser_esm.Y)(DrawerProvider.T,{children:(0,emotion_react_jsx_runtime_browser_esm.Y)(AddressSelectDrawerV2WithTranslate,(0,tslib_es6.Cl)({},args))})}))},apiAddresses=[(0,mocks.$8)({seed:12345,isDefaultSender:!0}),(0,mocks.$8)({seed:12346,isDefaultReturn:!0}),(0,mocks.$8)({seed:12347}),(0,mocks.$8)({seed:12348}),(0,mocks.$8)({seed:12349}),(0,mocks.$8)({seed:12340})],Default=Template.bind({});Default.args={addresses:apiAddresses,addressType:"sender",open:!0};var Return=Template.bind({});Return.args={addresses:apiAddresses,addressType:"return",open:!0};var SelectedAddress=Template.bind({});SelectedAddress.args={addresses:apiAddresses,selectedAddressID:apiAddresses[2].id,addressType:"sender",open:!0},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(args: AddressSelectDrawerV2Props) => <Provider store={createStore(combineReducers(reducers))}>\n    <DrawerProvider>\n      <AddressSelectDrawerV2WithTranslate {...args} />\n    </DrawerProvider>\n  </Provider>",...Default.parameters?.docs?.source}}},Return.parameters={...Return.parameters,docs:{...Return.parameters?.docs,source:{originalSource:"(args: AddressSelectDrawerV2Props) => <Provider store={createStore(combineReducers(reducers))}>\n    <DrawerProvider>\n      <AddressSelectDrawerV2WithTranslate {...args} />\n    </DrawerProvider>\n  </Provider>",...Return.parameters?.docs?.source}}},SelectedAddress.parameters={...SelectedAddress.parameters,docs:{...SelectedAddress.parameters?.docs,source:{originalSource:"(args: AddressSelectDrawerV2Props) => <Provider store={createStore(combineReducers(reducers))}>\n    <DrawerProvider>\n      <AddressSelectDrawerV2WithTranslate {...args} />\n    </DrawerProvider>\n  </Provider>",...SelectedAddress.parameters?.docs?.source}}}}}]);